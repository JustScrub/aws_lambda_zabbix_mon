# Template to run the infrastructure

Parameters:
    ZBLambInstanceType:
      Type: String
      Default: t3a.micro
    ZBLambImage:
      Type: String
      Default: ami-04f1b917806393faa # AMD image!
      ConstraintDescription: >
       Use distro with YUM package manager - e.g. SUSE, RedHat, CentOS. 
       Be aware that some Regions only support some images.
    ZBLambSSHRange:
      Type: String
      Default: 0.0.0.0/0
    ZBLambHTTPRange:
      Type: String
      Default: 0.0.0.0/0

    ZBLambVPC:
      Type: AWS::EC2::VPC::Id
      Description: The VPC under which to run the instances.
      ConstraintDescription: Must have a private AND a public subnet
    ZBLambPrivSubnet:
      Type: AWS::EC2::Subnet::Id
      ConstraintDescription: A private subnet. Must belong to ZBLambVPC.
    ZBLambPubSubnet:
      Type: AWS::EC2::Subnet::Id
      ConstraintDescription: A public subnet. Must belong to ZBLambVPC.

    ZBLambDBUser:
      Type: String
      NoEcho: 'true'
      Default: zabbix

    ZBLambDBPwd:
      Type: String
      NoEcho: 'true'
      Default: zabbix

    ZBLambCreditSpec:
      Type: String
      Default: standard
      AllowedValues:
        - standard
        - unlimited

Resources:
# key pair
  ZBLambKeypair:
    Type: "AWS::EC2::KeyPair"
    Properties:
      KeyName: ZBLambKeyPair
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor KeyPair
        - Key: Description
          Value: Key pair for SSH access to EC2 instances within the Zabbix Lambda monitor project
  
# networking 

  ZBLambSSHSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: SSH access
      VpcId: !Ref ZBLambVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ZBLambSSHRange
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor SSH security group
        - Key: Description
          Value: EC2 security group allowing connections to port 22 from parametrized IP CIDR range

  ZBLambHTTPSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: HTTP/S access
      VpcId: !Ref ZBLambVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ZBLambHTTPRange
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ZBLambHTTPRange
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref ZBLambHTTPRange
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ZBLambHTTPRange
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor HTTP/S security group
        - Key: Description
          Value: EC2 security group allowing connections to ports 443, 8443, 80 and 8080 from parametrized IP CIDR range

# EC2 Instances

  ZBLambAppInstance:
    Type: "AWS::EC2::Instance"
    DependsOn: ZBLambZabProxy
    Properties:
      InstanceType: !Ref ZBLambInstanceType
      ImageId: !Ref ZBLambImage
      SecurityGroupIds:
        - !Ref ZBLambSSHSecGroup
        - !Ref ZBLambHTTPSecGroup
      KeyName: !Ref ZBLambKeypair
      UserData: 
        'Fn::Base64': !Sub
          - |
            #!/bin/bash -xe
            sudo yum install -y yum-utils jq
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ZBLambAppInstance --configsets InstallAndRun --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ZBLambAppInstance --region ${AWS::Region}
      SubnetId: !Ref ZBLambPrivSubnet
      CreditSpecification:
        CPUCredits: !Ref ZBLambCreditSpec
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor Zabbix agent
        - Key: Description
          Value: EC2 instance running a sample web app on ports 80/tcp and 443/tcp and Zabbix agent that monitors the instance

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Metadata:
        AWS::CloudFormation::Init:
            configSets:
                InstallAndRun:
                    - install_common
                    - configure
            install_common:
              packages:
                  yum:
                      docker: []
              services:
                  sysvinit:
                      docker:
                          enabled: "true"
                          ensureRunning: "true"

            configure:
              commands:
                01_run_simple_http:
                  command: sudo docker run -p 80:8080 -d nginxdemos/nginx-hello
                02_run_zabbix_agent:
                  command: !Sub
                    - >
                      sudo docker run 
                      --name zblamb-zabbix-agent 
                      -e ZBX_HOSTNAME="zblamb-agent" -e ZBX_SERVER_HOST="${ZabServ}" 
                      -p 10050:10050 
                      --init -d zabbix/zabbix-agent:ubuntu-5.4-latest
                    - ZabServ: !GetAtt ZBLambZabProxy.PrivateIP

  # cfn-hup utility for stack updates -- not needed (hopefully)
  #              files:
  #                "/etc/cfn/cfn-hup.conf":
  #                  content: !Sub |
  #                    [main]
  #                    stack=${AWS::StackId}
  #                    region=${AWS::Region}
  #                  mode: "000400"
  #                  owner: "root"
  #                  group: "root"
  #                "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
  #                  content: !Sub |
  #                      [cfn-auto-reloader-hook]
  #                      triggers=post.update
  #                      path=Resources.host2.Metadata.AWS::CloudFormation::Init
  #                      action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource host2 --region ${AWS::Region}
  #                  mode: "000400"
  #                  owner: "root"
  #                  group: "root"
          

  ZBLambZabProxy:
    Type: "AWS::EC2::Instance"
    DependsOn: ZBLambZabServer
    Properties:
      InstanceType: !Ref ZBLambInstanceType
      ImageId: !Ref ZBLambImage
      SecurityGroupIds:
        - !Ref ZBLambSSHSecGroup
      KeyName: !Ref ZBLambKeypair
      SubnetId: !Ref ZBLambPrivSubnet
      CreditSpecification:
        CPUCredits: !Ref ZBLambCreditSpec
      UserData: 
        'Fn::Base64': !Sub
          - |
            #!/bin/bash -xe
            sudo yum install -y yum-utils jq
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ZBLambZabProxy --configsets InstallAndRun --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ZBLambZabProxy --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor Zabbix proxy
        - Key: Description
          Value: EC2 instance running Zabbix proxy with SQLite3

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Metadata:
        AWS::CloudFormation::Init:
            configSets:
                InstallAndRun:
                    - install_common
                    - configure
            install_common:
              packages:
                  yum:
                      docker: []
              services:
                  sysvinit:
                      docker:
                          enabled: "true"
                          ensureRunning: "true"

            configure:
              commands:
                01_run_zabbix_proxy:
                  command: !Sub
                    - >
                      sudo docker run 
                      --name zblamb-zabbix-proxy 
                      -e ZBX_HOSTNAME=zblamb-proxy -e ZBX_SERVER_HOST=${ZabServ} -e ZBX_PROXYMODE=1
                      -p 10051:10051 
                      --init -d zabbix/zabbix-proxy-sqlite3:ubuntu-5.4-latest
                    - ZabServ: !GetAtt ZBLamZabServer.PrivateIP


  ZBLambZabServer:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref ZBLambInstanceType
      ImageId: !Ref ZBLambImage
      SecurityGroupIds:
        - !Ref ZBLambSSHSecGroup
        - !Ref ZBLambHTTPSecGroup
      KeyName: !Ref ZBLambKeypair
      UserData: 
        'Fn::Base64': !Sub
          - |
            #!/bin/bash -xe
            sudo yum install -y yum-utils jq
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ZBLambZabServer --configsets InstallAndRun --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ZBLambZabServer --region ${AWS::Region}
      SubnetId: !Ref ZBLambPubSubnet
      CreditSpecification:
        CPUCredits: !Ref ZBLambCreditSpec
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor Zabbix server and frontend
        - Key: Description
          Value: EC2 instance running Zabbix server with POSTGRESQL and Zabbix frontend over nginx with pqsql as well. Has public IPv4.


    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Metadata:
        AWS::CloudFormation::Init:
            configSets:
                InstallAndRun:
                    - install_common
                    - configure
            install_common:
              packages:
                  yum:
                      docker: []
              services:
                  sysvinit:
                      docker:
                          enabled: "true"
                          ensureRunning: "true"

            configure:
              commands:
                01_docker_bridge_network:
                  command: sudo docker network create -d bridge zab-serv-net
                02_start_pgsql_server:
                  command: !Sub 
                    - >
                      sudo docker run 
                      --name zblamb-postgres 
                      --network=zab-serv-net --network-alias=postgres-server 
                      -e POSTGRES_USER="${DBUser}" -e POSTGRES_PASSWORD="${DBPwd}" -e POSTGRES_DB="zabbix" 
                      postgres/13-alpine
                    - DBUser: !Ref ZBLambDBUser
                    - DBPwd: !Ref ZBLambDBPwd
                03_start_zabbix_server:
                  command: !Sub
                    - >
                      sudo docker run 
                      --name zblamb-zabbix-server 
                      --network=zab-serv-net --network-alias=zabbix-server 
                      -e POSTGRES_USER="${DBUser}" -e POSTGRES_PASSWORD="${DBPwd}" 
                      -p 10051:10051 
                      --init -d zabbix/zabbix-server-pgsql:ubuntu-5.4-latest
                    - DBUser: !Ref ZBLambDBUser
                    - DBPwd: !Ref ZBLambDBPwd
                04_start_zabbix_frontend:
                  command: >
                    sudo docker run 
                    --name zblamb-zabbix-web 
                    --network=zab-serv-net 
                    -e POSTGRES_USER="${DBUser}" -e POSTGRES_PASSWORD="${DBPwd}" 
                    -p 80:8080 -p 443:8443 
                    -d zabbix/zabbix-web-nginx-pgsql:ubuntu-5.4-latest

# Lambdas

  ZBLambFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AppendToLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor Mock Lambda function IAM role
        - Key: Description
          Value: IAM role of monitored Lambda functions, allowing some operations for CloudWatch

  ZBLambMockLambda1:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: ZBLambMockLambda1
      Description: |
        Lambda function that passes or fails on demand.
        Input: { 'result': 'pass' / 'raise' / 'fail' / 'timeout' }
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            todo = event.get('result')
            if todo == 'pass':
              return "passed"
            if todo == 'raise':
              raise Exception('raised')
            if todo == 'timeout':
              from time import sleep
              while True: sleep(1)
            exit(1)
      Handler: index.lambda_handler
      Runtime: python3.10
      Timeout: 2
      Role: !GetAtt ZBLambFunctionRole.Arn
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor Mock Lambda function
        - Key: Description
          Value: A sample lambda function to monitor via Zabbix. Successful call or type of failure can be invoked in the event argument.
