# Template to run the infrastructure

Parameters:
  ZBLambInstanceType:
    Type: String
    Default: t3a.micro
  ZBLambImage:
    Type: String
    Default: ami-04f1b917806393faa # AMD image!
    ConstraintDescription: >
      Use distro with YUM package manager - e.g. SUSE, RedHat, CentOS.  
      Be aware that some Regions only support some images.
  ZBLambSSHRange:
    Type: String
    Default: 0.0.0.0/0
  ZBLambHTTPRange:
    Type: String
    Default: 0.0.0.0/0

  ZBLambVPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC under which to run the instances.
    ConstraintDescription: Must have a private AND a public subnet
  ZBLambPubSubnet:
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: A public subnet. Must belong to ZBLambVPC
  ZBLambPrivSubnet:
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: A private subnet. Must belong to ZBLambVPC.

  ZBLambCreditSpec:
    Type: String
    Default: standard
    AllowedValues:
      - standard
      - unlimited

Resources:
  # key pair
  ZBLambKeypair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: ZBLambKeyPair
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor KeyPair
        - Key: Description
          Value: Key pair for SSH access to EC2 instances within the Zabbix Lambda monitor
            project

  # networking 

  ZBLambSSHSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH access
      VpcId: !Ref ZBLambVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ZBLambSSHRange
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor SSH security group
        - Key: Description
          Value: EC2 security group allowing connections to port 22 from parametrized IP
            CIDR range

  ZBLambHTTPSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP/S access
      VpcId: !Ref ZBLambVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ZBLambHTTPRange
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ZBLambHTTPRange
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref ZBLambHTTPRange
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ZBLambHTTPRange
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor HTTP/S security group
        - Key: Description
          Value: EC2 security group allowing connections to ports 443, 8443, 80 and 8080
            from parametrized IP CIDR range
  
  ZBLambZabbixSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Zabbix access
      VpcId: !Ref ZBLambVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 10050
          ToPort: 10050
          CidrIp: !Ref ZBLambZBXPortRange
        - IpProtocol: tcp
          FromPort: 10051
          ToPort: 10051
          CidrIp: !Ref ZBLambZBXPortRange
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor Zabbix security group
        - Key: Description
          Value: EC2 security group allowing connections to ports 10050 and 10051 from parametrized IP CIDR range

  # EC2 Instances

  ZBLambAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref ZBLambInstanceType
      ImageId: !Ref ZBLambImage
      SubnetId: !Ref ZBLambPubSubnet
      SecurityGroupIds:
        - !Ref ZBLambHTTPSecGroup
        - !Ref ZBLambSSHSecGroup
        - !Ref ZBLambZabbixSecGroup
      KeyName: !Ref ZBLambKeypair
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo yum install -y yum-utils jq git 
            git clone https://github.com/JustScrub/aws_lambda_zabbix_mon.git /root/alzm
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ZBLambAppInstance --configsets InstallAndRun --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ZBLambAppInstance --region ${AWS::Region}
      CreditSpecification:
        CPUCredits: !Ref ZBLambCreditSpec
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor Sample app
        - Key: Description
          Value: EC2 instance running a sample web app on ports 80/tcp and 443/tcp

    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - install_common
            - configure
        install_common:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'

        configure:
          commands:
            00_install_docker_compose:
              command: >-
                mkdir -p /usr/local/lib/docker/cli-plugins &&
                curl -SL https://github.com/docker/compose/releases/download/v2.28.1/docker-compose-linux-x86_64 
                -o /usr/local/lib/docker/cli-plugins/docker-compose &&
                sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            01_run_simple_http:
              command: docker run -p 8080:8080 --restart=always -d nginxdemos/nginx-hello:plain-text
            02_edit_zabbix_config:
              command: !Sub
                - >-
                    sed -i
                    -e "s/pg-user/${DBUser}/" 
                    -e "s/pg-pwd/${DBPwd}/" 
                    /root/alzm/compose/.env
                - DBUser: zabbix
                  DBPwd: zabbix
            03_start_zabbix_server:
              command: docker compose -f /root/alzm/compose/server-compose.yml up -d 
  
  ZBLambZabProxy:
    Type: "AWS::EC2::Instance"
    DependsOn: ZBLambAppInstance
    Properties:
      InstanceType: !Ref ZBLambInstanceType
      ImageId: !Ref ZBLambImage
      SecurityGroupIds:
        - !Ref ZBLambSSHSecGroup
        - !Ref ZBLambZabbixSecGroup
      KeyName: !Ref ZBLambKeyPair
      SubnetId: !Ref ZBLambPrivSubnet
      CreditSpecification:
        CPUCredits: !Ref ZBLambCreditSpec
      UserData: 
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo yum install -y yum-utils jq git
            git clone https://github.com/JustScrub/aws_lambda_zabbix_mon.git /root/alzm
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ZBLambZabProxy --configsets InstallAndRun --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ZBLambZabProxy --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor Zabbix proxy
        - Key: Description
          Value: EC2 instance running Zabbix proxy with SQLite3

    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - install_common
            - configure
        install_common:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: "true"
                ensureRunning: "true"

        configure:
          commands:
            00_install_docker_compose:
              command: >-
                mkdir -p /usr/local/lib/docker/cli-plugins &&
                curl -SL https://github.com/docker/compose/releases/download/v2.28.1/docker-compose-linux-x86_64 
                -o /usr/local/lib/docker/cli-plugins/docker-compose &&
                sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            01_configure_proxy:
              command: !Sub
                - sed -i -e "s/zabbix-server/${ServIP}/" /root/alzm/compose/.env
                - ServIP: !GetAtt ZBLambAppInstance.PrivateIp
            02_run_proxy_container:
              command: docker compose -f /root/alzm/compose/proxy-compose.yml up -d  