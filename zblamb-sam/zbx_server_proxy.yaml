
Metadata:
  TemplateName: zbx_server_proxy

Parameters:
  # networking params
  ZBLambPrivSubnet:
    Type: String
    Description: A private subnet. Must belong to ZBLambVPC.
    Default: ""
  ZBLambPubSubnet:
    Type: String
    Description: A public subnet. Must belong to ZBLambVPC.
    Default: ""
  ZBLambVPC:
    Type: String
    Description: The VPC under which to run the instances.
    Default: ""
  ZBLambSSHRange:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR range of IP addresses able to connect via SSH
  ZBLambHTTPRange:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR range of IP addresses able to connect to ports 80, 8080, 443 and 8443
  ZBLambZBXPortRange:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR range of IP addresses able to connect to Zabbix ports 10050 and 10051. Recommended the range of specified VPC.
  
  # zabbix instances params
  ZBLambZabbixSuffix:
    Type: String
  ZBLambInstanceType:
    Type: String
    Default: t3a.micro
  ZBLambImage:
    Type: AWS::EC2::Image::Id
    Default: ami-04f1b917806393faa # AMD image!
    Description: >
      Use distro with YUM package manager - e.g. SUSE, RedHat, CentOS. 
      Be aware that some Regions only support some images.
  ZBLambDBUser:
    Type: String
    NoEcho: 'true'
    Default: zabbix
  ZBLambDBPwd:
    Type: String
    NoEcho: 'true'
    Default: zabbix
  ZBLambCreditSpec:
    Type: String
    Default: standard
    AllowedValues:
      - standard
      - unlimited
  ZBLambCreateProxy:
    Type: String
    AllowedValues:
      - "yes"
      - "no"
    Default: "yes"
    Description: Whether to create the Zabbix Proxy

Conditions:
  CreateProxy: !Equals
    - !Ref ZBLambCreateProxy
    - "yes"
  Defined-ZBLambPrivSubnet: !Not [ !Equals [!Ref ZBLambPrivSubnet, ""]]
  Defined-ZBLambPubSubnet: !Not [ !Equals [!Ref ZBLambPubSubnet, ""]]
  Defined-ZBLambVPC: !Not [ !Equals [!Ref ZBLambVPC, ""]]

Resources:

# networking 
  ZBLambSSHSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: SSH access
      VpcId: !If [ Defined-ZBLambVPC, !Ref ZBLambVPC, !ImportValue ZBLamb::VpcId ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ZBLambSSHRange
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor SSH security group
        - Key: Description
          Value: EC2 security group allowing connections to port 22 from parametrized IP CIDR range

  ZBLambHTTPSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: HTTP/S access
      VpcId: !If [ Defined-ZBLambVPC, !Ref ZBLambVPC, !ImportValue ZBLamb::VpcId ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref ZBLambHTTPRange
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref ZBLambHTTPRange
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref ZBLambHTTPRange
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref ZBLambHTTPRange
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor HTTP/S security group
        - Key: Description
          Value: EC2 security group allowing connections to ports 443, 8443, 80 and 8080 from parametrized IP CIDR range

  ZBLambZabbixSecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Zabbix access
      VpcId: !If [ Defined-ZBLambVPC, !Ref ZBLambVPC, !ImportValue ZBLamb::VpcId ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 10050
          ToPort: 10050
          CidrIp: !Ref ZBLambZBXPortRange
        - IpProtocol: tcp
          FromPort: 10051
          ToPort: 10051
          CidrIp: !Ref ZBLambZBXPortRange
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor Zabbix security group
        - Key: Description
          Value: EC2 security group allowing connections to ports 10050 and 10051 from parametrized IP CIDR range

# Zabbix Instances

  ZBLambKeyPair:
    Type: "AWS::EC2::KeyPair"
    Properties:
      KeyName: ZBLambKeyPair
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor KeyPair
        - Key: Description
          Value: Key pair for SSH access to EC2 instances within the Zabbix Lambda monitor project

  ZBLambZabServer:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref ZBLambInstanceType
      ImageId: !Ref ZBLambImage
      SecurityGroupIds:
        - !Ref ZBLambSSHSecGroup
        - !Ref ZBLambZabbixSecGroup
        - !Ref ZBLambHTTPSecGroup
      KeyName: !Ref ZBLambKeyPair
      UserData: 
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo yum install -y yum-utils jq git
            git clone https://github.com/JustScrub/aws_lambda_zabbix_mon.git /root/alzm
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ZBLambZabServer --configsets InstallAndRun --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ZBLambZabServer --region ${AWS::Region}
      SubnetId: !If [ Defined-ZBLambPubSubnet, !Ref ZBLambPubSubnet, !ImportValue ZBLamb::PublicSubnetId ]
      CreditSpecification:
        CPUCredits: !Ref ZBLambCreditSpec
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor Zabbix server and frontend
        - Key: Description
          Value: EC2 instance running Zabbix server with POSTGRESQL and Zabbix frontend over nginx with pqsql as well. Has public IPv4.

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - install_common
            - configure
        install_common:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: "true"
                ensureRunning: "true"

        configure:
          commands:
            00_install_docker_compose:
              command: >-
                mkdir -p /usr/local/lib/docker/cli-plugins &&
                curl -SL https://github.com/docker/compose/releases/download/v2.28.1/docker-compose-linux-x86_64 
                -o /usr/local/lib/docker/cli-plugins/docker-compose &&
                sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            01_configure_postgres:
              command: !Sub >-
                sed -i
                -e "s/pg-user/${ZBLambDBUser}/" 
                -e "s/pg-pwd/${ZBLambDBPwd}/" 
                -e "s/zbx-suffix/${ZBLambZabbixSuffix}/" 
                /root/alzm/compose/.env
            02_run_server_containers:
              command: docker compose -f /root/alzm/compose/server-compose.yml up -d
            #call locally: python3 -m scripts.zapi <server_ip> 80 server
  
  ZBLambZabProxy:
    Type: "AWS::EC2::Instance"
    Condition: CreateProxy
    Properties:
      InstanceType: !Ref ZBLambInstanceType
      ImageId: !Ref ZBLambImage
      SecurityGroupIds:
        - !Ref ZBLambSSHSecGroup
        - !Ref ZBLambZabbixSecGroup
      KeyName: !Ref ZBLambKeyPair
      SubnetId: !If [ Defined-ZBLambPrivSubnet, !Ref ZBLambPrivSubnet, !ImportValue ZBLamb::PrivateSubnetId ]
      CreditSpecification:
        CPUCredits: !Ref ZBLambCreditSpec
      UserData: 
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            sudo yum install -y yum-utils jq git
            git clone https://github.com/JustScrub/aws_lambda_zabbix_mon.git /root/alzm
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ZBLambZabProxy --configsets InstallAndRun --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ZBLambZabProxy --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: Zabbix Lambda monitor Zabbix proxy
        - Key: Description
          Value: EC2 instance running Zabbix proxy with SQLite3

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - install_common
            - configure
        install_common:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: "true"
                ensureRunning: "true"

        configure:
          commands:
            00_install_docker_compose:
              command: >-
                mkdir -p /usr/local/lib/docker/cli-plugins &&
                curl -SL https://github.com/docker/compose/releases/download/v2.28.1/docker-compose-linux-x86_64 
                -o /usr/local/lib/docker/cli-plugins/docker-compose &&
                sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            01_configure_proxy:
              command: !Sub >-
                sed -i
                -e "s/zabbix-server/${ZBLambZabServer.PrivateIp}/" 
                -e "s/zbx-suffix/${ZBLambZabbixSuffix}/" 
                /root/alzm/compose/.env
            02_run_proxy_container:
              command: docker compose -f /root/alzm/compose/proxy-compose.yml up -d  
            #call locally: python3 -m scripts.zapi <server_ip> 80 proxy <proxy_ip>

Outputs:
  ZabbixServerPrivateIP:
    Description: Private IP of Zabbix Server
    Value: !GetAtt ZBLambZabServer.PrivateIp
    Export:
      Name: ZBLamb::ZabbixServerPrivateIp

  ZabbixProxyPrivateIP:
    Description: Private IP of Zabbix Proxy
    Value: !If
      - CreateProxy
      - !GetAtt ZBLambZabProxy.PrivateIp
      - !GetAtt ZBLambZabServer.PrivateIp
    Export:
      Name: ZBLamb::ZabbixProxyPrivateIp

  SSHKeyId:
    Description: >
      ID of the SSH keypair to access the instances. 
      Private key stored at /ec2/keypair/<KeyID> in Parameter Store
    Value: !GetAtt ZBLambKeyPair.KeyPairId